import {
    Component,
    effect,
    inject,
    OnDestroy,
    OnInit,
    signal,
    ViewChild,
    ViewEncapsulation
} from '@angular/core';
import {
    FormBuilder,
    FormGroup,
    ReactiveFormsModule,
    Validators,
    AbstractControl,
    ValidatorFn
} from '@angular/forms';
import { FloatLabelModule } from 'primeng/floatlabel';
import { InputTextModule } from 'primeng/inputtext';
import { TextareaModule } from 'primeng/textarea';
import { Select } from 'primeng/select';
import { ToggleSwitchModule } from 'primeng/toggleswitch';
import { ButtonModule } from 'primeng/button';
import { Seo } from '../../components/seo/seo';
import { ActivatedRoute, Router } from '@angular/router';
import { LoadingService } from '@/layout/service/loading.service';
import { CommonModule } from '@angular/common';
import { MessageService } from 'primeng/api';
import { TexteditorCommon } from '../../components/texteditor-common/texteditor-common';
import { PostCategoryFacade } from '@/store/postCategory/postCategory.facade';
import { PostCategory } from '@/interfaces/post-category.interface';
import { PostCategoryService } from '@/pages/service/post-category.service';
import { ProductApiService } from '@/pages/service/productApi.service';
import { firstValueFrom, Subscription } from 'rxjs';
import { Product } from '@/interfaces/product.interface';
import { ProductStore } from '@/store/product/product.store';
import { MultiSelect } from 'primeng/multiselect';
import { InputNumber } from 'primeng/inputnumber';
import { Tag } from 'primeng/tag';
import { DragDropImgList } from '../../components/drag-drop-img-list/drag-drop-img-list';
import { AutoComplete } from 'primeng/autocomplete';
import { environment } from 'src/environments/environment';

interface AutoCompleteCompleteEvent {
    originalEvent: Event;
    query: string;
}

@Component({
    selector: 'app-product-form',
    imports: [
        ReactiveFormsModule,
        InputTextModule,
        FloatLabelModule,
        TextareaModule,
        Select,
        ToggleSwitchModule,
        ButtonModule,
        Seo,
        TexteditorCommon,
        CommonModule,
        AutoComplete,
        MultiSelect,
        InputNumber,
        DragDropImgList
    ],
    encapsulation: ViewEncapsulation.None,
    templateUrl: './product-form.html',
    styleUrl: './product-form.scss'
})
export class ProductForm implements OnInit, OnDestroy {
    private fb = inject(FormBuilder);
    private loadingService = inject(LoadingService);
    private messageService = inject(MessageService);
    private route = inject(ActivatedRoute);
    private router = inject(Router);
    private productStore = inject(ProductStore);

    currentId = signal<number | undefined>(undefined);
    private previewIcon = signal<string | null>(null);

    headerTitle!: string;
    isEditMode = signal(false);
    form!: FormGroup;

    private _subs = new Subscription();
    seoData: any = null;
    seoStatus: 'VALID' | 'INVALID' | 'PENDING' = 'PENDING';
    @ViewChild(Seo) seoComp?: Seo;

    // C·ªù ƒë√°nh d·∫•u ƒëang submit ƒë·ªÉ v√¥ hi·ªáu h√≥a UI trong qu√° tr√¨nh t·∫°o/c·∫≠p nh·∫≠t
    submitting = false;

    // C√°c tr∆∞·ªùng hi·ªÉn th·ªã khi ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    createdAt?: string | null = null;
    updatedAt?: string | null = null;

    // C√°c tr∆∞·ªùng hi·ªÉn th·ªã khi ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    createdBy?: string | null = null;
    updatedBy?: string | null = null;

    booleanOptions = [
        { label: 'C√≥', value: true },
        { label: 'Kh√¥ng', value: false }
    ];

    statusOptions = [
        { name: 'Ho·∫°t ƒë·ªông', code: true },
        { name: 'Kh√¥ng ho·∫°t ƒë·ªông', code: false }
    ];

    promotionOptions = [
        { name: 'C√≥ khuy·∫øn m√£i', code: true },
        { name: 'Kh√¥ng c√≥ khuy·∫øn m√£i', code: false }
    ];

    termOptions = [
        { name: '1 nƒÉm', code: '1Y' },
        { name: '2 nƒÉm', code: '2Y' },
        { name: '3 nƒÉm', code: '3Y' }
    ];

    constructor() {
        this.form = this.fb.group({
            name: ['', [Validators.required]],
            description: [''],
            shortContent: [''],
            content: ['', [Validators.required]],
            price: [undefined, [Validators.min(0)]],
            coverage: [undefined],
            term: [''],
            targetLink: [''],
            targetFile: [''],
            details: [''],
            active: [true, [Validators.required]],
            note: [''],
            priority: [0],
            isHighlighted: [false],
            isFeatured: [false],
            isSaleOnline: [false],
            isPromotion: [false],
            promotionDetails: [''],
            tags: [undefined],
            imgs: [[], this.imgsValidator],
            icon: [null, Validators.required],
            metaKeywords: ['']
        });

        // Effect: c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ header khi ch·∫ø ƒë·ªô edit/create thay ƒë·ªïi
        effect(() => {
            this.headerTitle = this.isEditMode()
                ? 'C·∫≠p Nh·∫≠t S·∫£n Ph·∫©m'
                : 'Th√™m S·∫£n Ph·∫©m';
        });
    }

    // Validator: imgs ph·∫£i c√≥ √≠t nh·∫•t 1 h√¨nh ·∫£nh
    private imgsValidator(control: AbstractControl) {
        const value = control.value;
        if (!value || !Array.isArray(value) || value.length === 0) {
            return { required: true };
        }
        return null;
    }

    // ===== C√ÅC H√ÄM TEST DATA (CH·ªà D√ôNG TRONG DEVELOPMENT) =====

    // ƒêi·ªÅn d·ªØ li·ªáu test n·∫øu ƒëang ·ªü development v√† ch·∫ø ƒë·ªô create
    private fillTestDataIfNeeded(): void {
        if (!environment.production && !this.isEditMode()) {
            setTimeout(() => this.fillTestData(), 100); // Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o form ƒë√£ kh·ªüi t·∫°o
        }
    }

    // üß™ H√ÄM TI·ªÜN √çCH: G·ªçi t·ª´ console ƒë·ªÉ ƒëi·ªÅn d·ªØ li·ªáu test b·∫•t k·ª≥ l√∫c n√†o
    // S·ª≠ d·ª•ng: window.fillTestData() trong browser console
    private setupTestDataHelper(): void {
        if (!environment.production) {
            (window as any).fillTestData = () => {
                this.fillTestData();
                console.log('‚úÖ ƒê√£ ƒëi·ªÅn l·∫°i d·ªØ li·ªáu test t·ª´ console helper');
            };
            console.log(
                'üß™ Test helper ƒë√£ s·∫µn s√†ng! G√µ "fillTestData()" trong console ƒë·ªÉ ƒëi·ªÅn d·ªØ li·ªáu test'
            );
        }
    }

    // ƒêi·ªÅn d·ªØ li·ªáu test v√†o form
    private fillTestData(): void {
        const testData = this.generateTestData();
        this.form.patchValue(testData);

        // ƒêi·ªÅn d·ªØ li·ªáu cho c√°c tr∆∞·ªùng ƒë·∫∑c bi·ªát
        this.fillTestTags();
        this.fillTestMetaKeywords();
        this.fillTestSeoData();

        console.log('‚úÖ ƒê√£ ƒëi·ªÅn d·ªØ li·ªáu test v√†o form (Development mode)');
    }

    // T·∫°o d·ªØ li·ªáu test ng·∫´u nhi√™n
    private generateTestData(): any {
        const productTypes = [
            'B·∫£o hi·ªÉm √¥ t√¥',
            'B·∫£o hi·ªÉm s·ª©c kh·ªèe',
            'B·∫£o hi·ªÉm nh√¢n th·ªç',
            'B·∫£o hi·ªÉm du l·ªãch',
            'B·∫£o hi·ªÉm t√†i s·∫£n'
        ];
        const randomType =
            productTypes[Math.floor(Math.random() * productTypes.length)];
        const randomId = Math.floor(Math.random() * 1000);

        return {
            name: `${randomType} ${randomId}`,
            description: `M√¥ t·∫£ chi ti·∫øt cho ${randomType.toLowerCase()} v·ªõi c√°c t√≠nh nƒÉng ∆∞u vi·ªát`,
            shortContent: `T√≥m t·∫Øt v·ªÅ ${randomType.toLowerCase()} d√†nh cho kh√°ch h√†ng`,
            content: this.generateRandomContent(randomType),
            price: Math.floor(Math.random() * 10000000) + 500000, // 500k - 10.5M
            coverage: Math.floor(Math.random() * 500000000) + 10000000, // 10M - 510M
            term: this.getRandomTerm(),
            targetLink: `https://example.com/${randomType.toLowerCase().replace(/\s+/g, '-')}-${randomId}`,
            targetFile: `https://example.com/${randomType.toLowerCase().replace(/\s+/g, '-')}-${randomId}`,
            details: `Chi ti·∫øt ƒë·∫ßy ƒë·ªß v·ªÅ ${randomType.toLowerCase()} bao g·ªìm ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán`,
            note: `Ghi ch√∫ cho ${randomType} - c·∫≠p nh·∫≠t ${new Date().toLocaleDateString('vi-VN')}`,
            priority: Math.floor(Math.random() * 10),
            isHighlighted: Math.random() > 0.7,
            isFeatured: Math.random() > 0.8,
            isSaleOnline: Math.random() > 0.5,
            isPromotion: Math.random() > 0.6,
            promotionDetails:
                Math.random() > 0.6
                    ? `Khuy·∫øn m√£i ƒë·∫∑c bi·ªát ${Math.floor(Math.random() * 50)}% off`
                    : '',
            active: true
        };
    }

    // T·∫°o n·ªôi dung ng·∫´u nhi√™n cho content
    private generateRandomContent(productType: string): string {
        const benefits = [
            'B·∫£o v·ªá to√†n di·ªán cho gia ƒë√¨nh',
            'Quy tr√¨nh gi·∫£i quy·∫øt b·ªìi th∆∞·ªùng nhanh ch√≥ng',
            'H·ªó tr·ª£ 24/7 trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p',
            'Ph√≠ b·∫£o hi·ªÉm c·∫°nh tranh',
            'M·∫°ng l∆∞·ªõi h·ªó tr·ª£ r·ªông kh·∫Øp c·∫£ n∆∞·ªõc'
        ];

        const features = [
            'Kh√¥ng gi·ªõi h·∫°n s·ªë l·∫ßn kh√°m ch·ªØa b·ªánh',
            'ƒê∆∞·ª£c √°p d·ª•ng t·∫°i t·∫•t c·∫£ b·ªánh vi·ªán c√¥ng v√† t∆∞',
            'Thanh to√°n tr·ª±c ti·∫øp kh√¥ng c·∫ßn ·ª©ng tr∆∞·ªõc',
            'B·ªìi th∆∞·ªùng l√™n ƒë·∫øn 100% chi ph√≠ ƒëi·ªÅu tr·ªã',
            'Mi·ªÖn th·∫©m ƒë·ªãnh y t·∫ø cho ng∆∞·ªùi d∆∞·ªõi 50 tu·ªïi'
        ];

        return `
            <h2>Gi·ªõi thi·ªáu v·ªÅ ${productType}</h2>
            <p>S·∫£n ph·∫©m ${productType.toLowerCase()} ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát ƒë·ªÉ ƒë√°p ·ª©ng nhu c·∫ßu b·∫£o v·ªá c·ªßa kh√°ch h√†ng Vi·ªát Nam.</p>

            <h3>L·ª£i √≠ch n·ªïi b·∫≠t</h3>
            <ul>
                ${benefits
                    .slice(0, 3)
                    .map((benefit) => `<li>${benefit}</li>`)
                    .join('')}
            </ul>

            <h3>T√≠nh nƒÉng ch√≠nh</h3>
            <ul>
                ${features
                    .slice(0, 3)
                    .map((feature) => `<li>${feature}</li>`)
                    .join('')}
            </ul>

            <p><strong>Li√™n h·ªá ngay h√¥m nay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt!</strong></p>
        `;
    }

    // L·∫•y k·ª≥ h·∫°n ng·∫´u nhi√™n
    private getRandomTerm(): string {
        const terms = ['1Y', '2Y', '3Y'];
        return terms[Math.floor(Math.random() * terms.length)];
    }

    // ƒêi·ªÅn test tags
    private fillTestTags(): void {
        const sampleTags = [
            'b·∫£o hi·ªÉm',
            's·ª©c kh·ªèe',
            'gia ƒë√¨nh',
            'an to√†n',
            'ti·∫øt ki·ªám',
            '∆∞u ƒë√£i'
        ];
        const randomTags = sampleTags
            .sort(() => Math.random() - 0.5)
            .slice(0, Math.floor(Math.random() * 4) + 2); // 2-5 tags

        this.form.get('tags')?.setValue(randomTags);
    }

    // ƒêi·ªÅn test meta keywords
    private fillTestMetaKeywords(): void {
        const sampleKeywords = [
            'b·∫£o hi·ªÉm online',
            'mua b·∫£o hi·ªÉm',
            'b·∫£o hi·ªÉm gi√° r·∫ª',
            'b·∫£o hi·ªÉm uy t√≠n',
            'claims b·∫£o hi·ªÉm',
            't∆∞ v·∫•n b·∫£o hi·ªÉm'
        ];
        const randomKeywords = sampleKeywords
            .sort(() => Math.random() - 0.5)
            .slice(0, Math.floor(Math.random() * 3) + 3); // 3-5 keywords

        this.form.get('metaKeywords')?.setValue(randomKeywords);
    }

    // ƒêi·ªÅn test SEO data
    private fillTestSeoData(): void {
        const productName = this.form.get('name')?.value || 'S·∫£n ph·∫©m b·∫£o hi·ªÉm';
        this.seoData = {
            title: `${productName} - B·∫£o hi·ªÉm uy t√≠n, gi√° t·ªët`,
            description: `Mua ${productName.toLowerCase()} v·ªõi m·ª©c gi√° c·∫°nh tranh, quy tr√¨nh ƒë∆°n gi·∫£n. T∆∞ v·∫•n mi·ªÖn ph√≠ 24/7.`,
            keywords: `${productName.toLowerCase()}, b·∫£o hi·ªÉm online, mua b·∫£o hi·ªÉm`,
            ogTitle: `${productName} - ∆Øu ƒë√£i ƒë·∫∑c bi·ªát`,
            ogDescription: `Kh√°m ph√° ${productName.toLowerCase()} v·ªõi nhi·ªÅu ∆∞u ƒë√£i h·∫•p d·∫´n`,
            ogImage: 'https://example.com/og-image.jpg'
        };
        this.seoStatus = 'VALID';
    }

    ngOnInit(): void {
        // X·ª≠ l√Ω route parameter ƒë·ªÉ load d·ªØ li·ªáu edit
        this.handleRouteParams();
        // ƒêi·ªÅn d·ªØ li·ªáu test n·∫øu ·ªü ch·∫ø ƒë·ªô develop v√† create mode
        this.fillTestDataIfNeeded();

        // Setup helper cho console (development only)
        this.setupTestDataHelper();
    }

    // X·ª≠ l√Ω route parameter ƒë·ªÉ x√°c ƒë·ªãnh ch·∫ø ƒë·ªô edit v√† t·∫£i d·ªØ li·ªáu
    private handleRouteParams(): void {
        try {
            const idParam = this.route.snapshot.paramMap.get('id');
            if (idParam) {
                this.isEditMode.set(true);
                const id = Number(idParam);
                if (!isNaN(id)) {
                    this.currentId.set(id);
                    this.loadProductForEdit(id).catch((err) => {
                        console.error(
                            'Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m ƒë·ªÉ ch·ªânh s·ª≠a',
                            err
                        );
                        this.messageService.add({
                            severity: 'error',
                            summary: 'L·ªói',
                            detail: 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt s·∫£n ph·∫©m'
                        });
                    });
                } else {
                    console.warn('Tham s·ªë id kh√¥ng h·ª£p l·ªá');
                }
            }
        } catch (err) {
            // b·ªè qua
        }
    }

    // T·∫£i chi ti·∫øt s·∫£n ph·∫©m v√† ƒëi·ªÅn d·ªØ li·ªáu v√†o form ƒë·ªÉ c·∫≠p nh·∫≠t
    private async loadProductForEdit(id: number) {
        this.loadingService.show();
        try {
            const product: Product = await firstValueFrom(
                this.productStore.fetchById(id) as any
            );
            if (!product) throw new Error('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');

            // √Ånh x·∫° c√°c tr∆∞·ªùng c·ªßa Product interface v√†o form controls b·∫±ng patchValue
            this.form.patchValue({
                name: product.name ?? '',
                description: product.description ?? '',
                shortContent: product.shortContent ?? '',
                content: product.content ?? '',
                price: product.price ?? null,
                coverage: product.coverage ?? null,
                term: product.term ?? '',
                targetLink: product.targetLink ?? '',
                targetFile: product.targetFile ?? '',
                details: product.details ?? '',
                note: product.note ?? '',
                priority: product.priority ?? 0,
                isHighlighted: !!product.isHighlighted,
                isFeatured: !!product.isFeatured,
                isSaleOnline: !!product.isSaleOnline,
                isPromotion: !!product.isPromotion,
                promotionDetails: product.promotionDetails ?? '',
                active: !!product.active
            });

            // C√°c m·∫£ng d·ªØ li·ªáu
            if (Array.isArray(product.tags))
                this.form.get('tags')?.setValue(product.tags);
            if (Array.isArray(product.metaKeywords))
                this.form.get('metaKeywords')?.setValue(product.metaKeywords);

            // Icon: backend tr·∫£ v·ªÅ URL -> s·ª≠ d·ª•ng l√†m preview v√† set control th√†nh string
            if (product.icon) {
                try {
                    this.previewIcon.set(product.icon as any);
                    this.form.get('icon')?.setValue(product.icon);
                } catch (err) {}
            }

            // T·∫£i h√¨nh ·∫£nh hi·ªán c√≥ cho drag-drop component
            if (Array.isArray(product.imgs) && product.imgs.length > 0) {
                try {
                    const existingImages = product.imgs.map(
                        (url: string, index: number) => ({
                            id: `existing-${index}`,
                            url: url,
                            file: null // h√¨nh ·∫£nh hi·ªán c√≥, kh√¥ng c√≥ file object
                        })
                    );
                    this.form.get('imgs')?.setValue(existingImages);
                } catch (err) {
                    console.warn('Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh hi·ªán c√≥:', err);
                }
            }

            // SEO meta
            if (product.seoMeta) {
                this.seoData = product.seoMeta;
                this.seoStatus = 'VALID';
            }

            // C√°c tr∆∞·ªùng audit ƒë·ªÉ hi·ªÉn th·ªã
            this.createdAt = product.createdAt ?? null;
            this.updatedAt = product.updatedAt ?? null;
            this.createdBy = (product as any)?.createdBy ?? null;
            this.updatedBy = (product as any)?.updatedBy ?? null;

            // ƒê√°nh d·∫•u form l√† pristine v√¨ ch√∫ng ta ƒë√£ t·∫£i d·ªØ li·ªáu t·ª´ remote
            try {
                this.form.markAsPristine();
                this.form.markAsUntouched();
            } catch (err) {}
        } finally {
            try {
                this.loadingService.hide();
                console.log(
                    'Gi√° tr·ªã form s·∫£n ph·∫©m sau khi t·∫£i:',
                    this.form.value
                );
            } catch (ignore) {}
        }
    }

    ngOnDestroy(): void {
        // Thu h·ªìi object URL n·∫øu ch√∫ng ta ƒë√£ t·∫°o ƒë·ªÉ tr√°nh memory leak
        try {
            const url = this.previewIcon();
            if (url && url.startsWith('blob:')) URL.revokeObjectURL(url);
        } catch (err) {
            // b·ªè qua
        }
        try {
            this._subs.unsubscribe();
        } catch (err) {
            // b·ªè qua
        }
    }

    async submit() {
        console.log(
            '[ProductForm] Submit form, gi√° tr·ªã form:',
            this.form.value
        );
        this.form.markAllAsTouched();
        const childValid = this.seoComp
            ? this.seoComp.validate()
            : this.seoStatus === 'VALID';

        if (!this.form.valid || !childValid) {
            this.messageService.add({
                severity: 'error',
                summary: 'Thi·∫øu th√¥ng tin',
                detail: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin trong form'
            });
            this.form.markAllAsTouched();
            return;
        }

        const payload = this.buildPayload();

        // Hi·ªÉn th·ªã loading
        this.submitting = true;
        this.loadingService.show();

        try {
            const result = await this.performSave(payload);
            this.handleSaveSuccess(result);
        } catch (err: any) {
            console.error(
                '[ProductForm] L·ªói submit, gi√° tr·ªã form tr∆∞·ªõc khi x·ª≠ l√Ω l·ªói:',
                this.form.value,
                err
            );
            this.handleSaveError(err);
            console.log(
                '[ProductForm] ƒê√£ x·ª≠ l√Ω l·ªói submit, gi√° tr·ªã form sau khi x·ª≠ l√Ω l·ªói:',
                this.form.value
            );
            return;
        } finally {
            this.submitting = false;
            try {
                this.loadingService.hide();
            } catch (ignore) {}
        }
    }

    // X√¢y d·ª±ng payload cho Product
    private buildPayload(): any {
        const payload: any = {
            ...this.form.value,
            seoMeta: this.seoData
        };

        // X·ª≠ l√Ω d·ªØ li·ªáu imgs t·ª´ drag-drop component
        this.processImgsData(payload);

        // Che gi·∫•u file cho logs
        const logged = { ...payload };
        try {
            const f = this.form.get('icon')?.value;
            logged.icon = f ? '[File]' : (payload.icon ?? null);

            // Che gi·∫•u imgs files cho logging
            if (payload.imgs && payload.imgs.length > 0) {
                logged.imgs = `[${payload.imgs.length} items: ${payload.imgs.filter((i: any) => i instanceof File).length} files + ${payload.imgs.filter((i: any) => typeof i === 'string').length} urls]`;
            }
        } catch (err) {}
        console.log('ƒê√£ chu·∫©n b·ªã payload s·∫£n ph·∫©m (preview):', logged);
        console.log('Icon file object:', this.form.get('icon')?.value ?? null);
        console.log('D·ªØ li·ªáu h√¨nh ·∫£nh:', {
            totalImages: payload.imgs?.length || 0,
            newFiles:
                payload.imgs?.filter((img: any) => img instanceof File)
                    ?.length || 0,
            existingUrls:
                payload.imgs?.filter((img: any) => typeof img === 'string')
                    ?.length || 0
        });

        return payload;
    }

    // X·ª≠ l√Ω d·ªØ li·ªáu imgs t·ª´ drag-drop component
    private processImgsData(payload: any) {
        const imgsData = this.form.get('imgs')?.value || [];

        // T·∫°o m·∫£ng imgs m·ªõi v·ªõi c·∫£ Files v√† URLs
        payload.imgs = [];

        if (Array.isArray(imgsData)) {
            imgsData.forEach((item: any) => {
                if (item.isNew && item.file) {
                    // File m·ªõi ƒë·ªÉ upload - th√™m File object
                    payload.imgs.push(item.file);
                } else if (item.url && !item.isNew) {
                    // H√¨nh ·∫£nh hi·ªán c√≥ ƒë·ªÉ gi·ªØ l·∫°i - th√™m URL string
                    payload.imgs.push(item.url);
                }
            });
        }

        // Gi·ªØ field imgs ƒë·ªÉ buildFormData c√≥ th·ªÉ x·ª≠ l√Ω
        // (buildFormData s·∫Ω t·ª± ƒë·ªông ph√¢n bi·ªát File vs string)
    }

    // Th·ª±c hi·ªán l∆∞u v√† tr·∫£ v·ªÅ record ƒë√£ t·∫°o/c·∫≠p nh·∫≠t ho·∫∑c null khi update
    private async performSave(payload: any): Promise<any> {
        if (this.isEditMode() && this.currentId()) {
            const id = this.currentId() as number;
            const updated = await this.productStore.update(id, payload);
            return { action: 'update', record: updated };
        } else {
            const created = await this.productStore.create(payload);
            return { action: 'create', record: created };
        }
    }

    private handleSaveSuccess(result: any) {
        if (result.action === 'update') {
            this.messageService.add({
                severity: 'success',
                summary: 'C·∫≠p nh·∫≠t',
                detail: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng'
            });
        } else {
            this.messageService.add({
                severity: 'success',
                summary: 'T·∫°o',
                detail: 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng'
            });
        }
        // Chuy·ªÉn h∆∞·ªõng v·ªÅ danh s√°ch s·∫£n ph·∫©m khi th√†nh c√¥ng
        try {
            this.router
                .navigate(['/insurance/products'], { relativeTo: this.route })
                .catch((navErr) =>
                    console.warn(
                        'Chuy·ªÉn h∆∞·ªõng ƒë·∫øn danh s√°ch s·∫£n ph·∫©m th·∫•t b·∫°i',
                        navErr
                    )
                );
        } catch (navErr) {
            console.warn(
                'Chuy·ªÉn h∆∞·ªõng ƒë·∫øn danh s√°ch s·∫£n ph·∫©m th·∫•t b·∫°i',
                navErr
            );
        }
    }

    private handleSaveError(err: any) {
        console.error('L·ªói khi l∆∞u s·∫£n ph·∫©m:', err);
        this.messageService.add({
            severity: 'error',
            summary: 'L·ªói',
            detail: err?.error?.errors ?? 'C√≥ l·ªói x·∫£y ra khi l∆∞u s·∫£n ph·∫©m'
        });
        // ƒê·∫£m b·∫£o loading / submitting ƒë∆∞·ª£c t·∫Øt ngay l·∫≠p t·ª©c khi th·∫•t b·∫°i
        this.submitting = false;
        try {
            this.loadingService.hide();
        } catch (ignore) {}
    }

    searchTags(event: AutoCompleteCompleteEvent) {
        this.tags?.setValue(
            [...Array(10).keys()].map((item) => event.query + '-' + item)
        );
    }

    searchMetaKeywords(event: AutoCompleteCompleteEvent) {
        this.metaKeywords?.setValue(
            [...Array(10).keys()].map((item) => event.query + '-' + item)
        );
    }

    isInvalid(controlName: string) {
        const control = this.form.get(controlName);
        return !!(
            control &&
            control.invalid &&
            (control.touched || control.dirty)
        );
    }

    onFeaturedIconClick(): void {
        // Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn m·ªôt file h√¨nh ·∫£nh, preview v√† ƒë√≠nh k√®m v√†o form
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = (event: any) => {
            const file: File = event.target.files && event.target.files[0];
            if (!file) return;

            // Thu h·ªìi blob URL tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
            try {
                const prev = this.previewIcon();
                if (prev && prev.startsWith('blob:')) URL.revokeObjectURL(prev);
            } catch (err) {
                // b·ªè qua
            }

            // T·∫°o object URL preview v√† set v√†o signal
            const url = URL.createObjectURL(file);
            this.previewIcon.set(url);

            // ƒê√≠nh k√®m File v√†o form control ƒë·ªÉ ProductService.buildFormData s·∫Ω bao g·ªìm n√≥
            this.form.get('icon')?.setValue(file);
        };
        input.click();
    }

    get tags() {
        return this.form.get('tags');
    }
    get metaKeywords() {
        return this.form.get('metaKeywords');
    }

    // H√¨nh ·∫£nh n·ªïi b·∫≠t hi·ªÉn th·ªã: preview khi c√≥ s·∫µn, ng∆∞·ª£c l·∫°i l√† h√¨nh ·∫£nh m·∫∑c ƒë·ªãnh
    get displayFeaturedIcon(): string {
        return this.previewIcon() ?? 'assets/images/no-img.webp';
    }
}
